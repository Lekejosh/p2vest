// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdTasks  Task[]         @relation("CreatedTasks")
  assignedTasks Task[]         @relation("AssignedTasks")
  comments      Comment[]
  notifications Notification[]

  @@index([email])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(TODO)
  createdBy   String
  assignedTo  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  createdByUser  User           @relation("CreatedTasks", fields: [createdBy], references: [id], onDelete: Cascade)
  assignedToUser User?          @relation("AssignedTasks", fields: [assignedTo], references: [id], onDelete: SetNull)
  TaskTag        TaskTag[]
  Comment        Comment[]
  Notification   Notification[]

  @@index([dueDate])
  @@index([status])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  TaskTag TaskTag[]
}

model TaskTag {
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
}

model Comment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  content   String
  edited Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  taskId    String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)
}
